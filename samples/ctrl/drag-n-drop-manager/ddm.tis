
// drag-n-drop manager, setup draggable environment
// Example of the call of this function (using "call-object" notation):
// DragDrop
//    {
//      what      : "ul#tools > li, ul.zone > li",
//      where     : "ul.zone",
//      notBefore : "ul.zone > caption",
//      acceptDrag: dragType,
//      easeDrop  : Animation.Ease.OutQuad
//    };

function DragDrop(def) 
{
  //| 
  //| def here is an object that has following fields:
  //|
  //| def.what = selector [string], defines group of draggable elements.
  //| def.where = selector [string], defines single of a group of target elements where dragables can arrive.
  //| def.notBefore = selector [string], defines positions where drop is not allowed. 
  //| def.acceptDrop = function(draggable, target), function to be called before the drop, if it is defined and returns true operation ends successfully.
  //| def.acceptDrag = function(draggable), function to be called before the drag starts, if it is defined and returns either #copying or #moving operation starts successfully.
  //| def.arrivedTo = function(draggable, target), function to be called when draggable enters the target.
  //| def.dropped = function(draggable, from), function to be called when draggable dropped on the target. 
  //|               target is new draggable.parent and 'from' is a previous parent of the draggable.
  //| def.container = parent-selector [string], selector of the nearest parent of def.what elements where DD operation is allowed.
  //| def.easeDrop = function(t, b, c, d) - ease function used for the drop animation, one of Animation.Ease.*** functions.

  const X_THRESHOLD = 4;
  const Y_THRESHOLD = 4;
  const STEP_DELAY  = 8;

  var dd_x, dd_y;
  var dd_active = false;
  var dd_op = #moving;
  var dd_source = null;     // the draggable
  var dd_target = null;     // current target, mouse is over it.
  var dd_targets = null;    // list of all active target elements.
  var dd_placeholder_src = null;
  var dd_placeholder_dst = null;
  var dd_container = null;  // DD happens inside this only
  
  // forward declaration of functions:
  var doDrop; 
  var doCancelDrop; 
  var setupDstPlaceholderAt; 
  var setupSrcPlaceholderAt; 
  var onMouseHandler;
  var captured = null;
  
  // do cleanup
  function ddFinalize()
  {
    // clean all this up
    for(var tel in dd_targets)
      tel.state.droptarget = false; 
    if(dd_target) dd_target.state.dragover = false; 
    if(dd_placeholder_dst) dd_placeholder_dst.remove();
    if(dd_placeholder_src) dd_placeholder_src.remove();
    dd_source.state[ dd_op ] = false;
    
    // commit screen updates:      
    view.update();
    // Be polite with the GC:
    dd_target = dd_targets = dd_placeholder_src = dd_placeholder_dst = dd_source = null;
  }
  
  // init-loop-commit:
  function doDD(el, vx, vy) // DD loop
  {
   // 1) ask initiator about our draggavle:
    if( def.acceptDrag ) 
    {
      dd_op = def.acceptDrag( el );
      if( dd_op != #copying && dd_op != #moving )
        return false; // not this time, sigh.
    }
  // 1.bis) setup container, if any:  
    if( def.container )
    {
      dd_container = el.parent.selectParent(def.container);
      assert dd_container;
    }
    
  // 2) find and mark all allowed targets:
    dd_targets = self.selectAll(def.where);
    
  // sort all dd_targets by depth, so child options be found before the whole <select>
    dd_targets.sort(:e1,e2{
      function depth(e)
      {
        var depth = 0;
        do { e = e.parent; depth++; } while(e.parent);
        return depth;
      }
      var d1 = depth(e1);
      var d2 = depth(e2);
      if( d1 < d2 ) return 1;
      if( d1 === d2 ) return 0;
      return -1;

    });

    assert dd_targets.length > 0;
    for(var tel in dd_targets) 
      tel.state.droptarget = true; // to give CSS a chance to highlight them somehow using :drop-target
    
    dd_active = true;
    dd_source = el;
    var (w,h) = dd_source.box(#dimension,#inner);

  // 3) create placeholder of the draggable, it will keep its place: 
    if( dd_op == #moving )
    {
      dd_placeholder_src = new Element(dd_source.tag," ");
    } else { // copying 
      dd_placeholder_src = dd_source.clone();
    }
    dd_placeholder_src.@.addClass("placeholder","src");
  // 3.a) append placeholder to the end of dd_source.parent:
    dd_source.parent.insert(dd_placeholder_src); 
  // 3.b) exchange positions of dd_source and dd_placeholder_src so dd_source 
  //      that we move will always be at the end so it will not conflict with findByPos
    dd_source.swap(dd_placeholder_src); 
    dd_placeholder_src.style.set { width:w, height:h };
    //dd_placeholder_src.style#width = w;
    //dd_placeholder_src.style#height = h;
  
  // 4) mark the draggable and take it off: 
  
    dd_source.state[ dd_op ] = true;
    dd_source.move( vx - dd_x, vy - dd_y);
    
  // 5) commit screen updates:
    view.update();
   
  // 6) DD event loop until it not dd_active 
    do view.doEvent() while(dd_active);
     
  // 7) Loop finished, do either drop or cancel it:   
    if(dd_target) 
      doDrop();
    else
      doCancelDrop();
   
    return true;
  }
    
  function findPosHorz(vx,vy) 
  {
    var notb = def.notBefore;
    for( var tc in dd_target ) 
    {
      if( tc === dd_source ) continue;
      var (x1,y1,x2,y2) = tc.box(#rect, #margin, #view);
      var xm = (x1 + x2) / 2;
      //if( vx >= x1 && vy >= y1 && vx <= x2 && vy <= y2 )
      if( vx <= xm )
      {
        if(notb && tc.match(notb)) continue;
        return tc.index;
      }
    }
    return dd_target.length;
  }
  function findPosVert(vx,vy) 
  {
    var notb = def.notBefore;
    for( var tc in dd_target ) 
    {
      if( tc === dd_source ) continue;
      var (x1,y1,x2,y2) = tc.box(#rect, #margin, #view);
      var ym = (y1 + y2) / 2;
      if( vy <= ym )
      {
        if(notb && tc.match(notb)) continue;
        return tc.index;
      }
    }
    return dd_target.length;
  }

  function doMove(vx, vy)
  {
   //   stdout.$n({vx} {vy});
    if( !dd_source ) return;
    
    var x = vx - dd_x;
    var y = vy - dd_y;
    // move the draggable:
    if( dd_container )
    {
      var (x1,y1,x2,y2) = dd_container.box(#rect, #inner, #view);
      var (mx1,my1,mx2,my2) = dd_source.box(#rect, #margin, #inner); // actual margin sizes of the draggable
      var (w,h) = dd_source.box(#dimension, #inner); // actual dimensions of the draggable
      // inflate container rect:
      x1 += mx1; x2 -= mx2; 
      y1 += my1; y2 -= my2; 
      // apply positioning constraints we've got:
      if( x < x1 ) x = x1; else if( x + w > x2 ) x = x2 - w + 1;
      if( y < y1 ) y = y1; else if( y + h > y2 ) y = y2 - h + 1;
      vy = y + dd_y;
      vx = x + dd_x;
    }
    
    dd_source.move(x, y);
  
    var found = null;
    for( var tel in dd_targets )
    {
      var (x1,y1,x2,y2) = tel.box(#rect, #inner, #view);
      if( vx >= x1 && vy >= y1 && vx <= x2 && vy <= y2 ) { found = tel;  break; }
    }
    //stdout.$n({found.tag});
    if( dd_target !== found )
    {
      if(dd_target) // we have left it
      { 
        dd_target.state.dragover = false; // CSS: :drag-over 
        if( dd_placeholder_dst ) { dd_placeholder_dst.detach(); dd_placeholder_dst = null; }
      }
      dd_target = found;
      if(dd_target) dd_target.state.dragover = true;
    }
   
    if(!dd_target) return;
    
    // ok, we are on dd_target, find insert position on it
    var flow = dd_target.style#flow;
    var horz = false;
    var pos = 0;

    switch( flow )
    {
      case "horizontal-flow": 
      case "horizontal":      
        pos = findPosHorz(vx,vy); 
        horz = true;
        break;
      case "vertical-flow":
      default:
        pos = findPosVert(vx,vy); 
        horz = false;
        break; 
    }
    // check for positions that are not allowed in DD:
    if( pos == dd_target.length ) // after last pos
    {
      var tc = dd_target.last;
      if(tc === dd_source) tc = tc.prior;
      if(tc && tc.$is(.placeholder)) return; // not allowing to insert next to placeholder
    }
    else
    {
      var tc = dd_target[pos];
      if(tc && tc.match(".placeholder")) return;
      if(tc.prior && tc.prior.match(".placeholder")) return;
    }
    // finally setup it:
    
    if( dd_source.parent === dd_target ) // if elements is moved inside its continer
      setupSrcPlaceholderAt(pos, horz);
    else
      setupDstPlaceholderAt(pos, horz);
  }
  
  function moveIt(what, where, whenDone)
  {
    var easef = def.easeDrop;
    if( !easef )
      { whenDone(what,where); return; } // just return
    
    // do requested animation:  
    var (fromx,fromy,fromw,fromh) = what.box(#rectw, #inner, #view);
    var (tox,toy,tow,toh) = where.box(#rectw, #inner, #view);
    var progress = 0.0;
    function anim() 
    {
      progress += 0.05;
      if( progress > 1.0 ) { whenDone(what,where); return; }
      var x = easef(progress, fromx, tox - fromx, 1.0).toInteger();
      var y = easef(progress, fromy, toy - fromy, 1.0).toInteger();
      var w = easef(progress, fromw, tow - fromw, 1.0).toInteger();
      var h = easef(progress, fromh, toh - fromh, 1.0).toInteger();
      what.move(x,y,w,h);
      return STEP_DELAY;
    }
    what.animate(anim);
  }
 
  doDrop = function() 
  {
    assert dd_source && dd_target;
    var dst = dd_placeholder_dst || dd_placeholder_src;
    if(!def.acceptDrop || def.acceptDrop( dd_target, el, dst.index ))
    {
      // OK to drop it here, do it:
      moveIt(dd_source, dst, function()
      {
        var idx = dst.index; 
        if(dd_placeholder_dst)
        {
          dd_placeholder_dst.remove(); // delete it from the DOM
          dd_placeholder_dst = null;
        }
        dd_source.move();
        var from = dd_source.parent;
        dd_target.insert(dd_source, idx); // insert our element in place of dd_placeholder_dst
        
        // unsubscribe if needed
        if( !dd_source.selectParent(def.what) )
          dd_source.unsubscribe(onMouseHandler);
          
        if(dd_op == #moving) 
          dd_placeholder_src.remove();
        else if(dd_op == #copying) 
        { 
          // cvt our placeholder to normal moveable thing; 
          dd_placeholder_src.@.removeClass("placeholder","src"); 
          dd_placeholder_src.subscribe(onMouseHandler, Event.MOUSE);
        }
        dd_placeholder_src = null;
        if(def.dropped) def.dropped(dd_source, from);
        ddFinalize();
      });
    }
    else 
      doCancelDrop();
  }
  doCancelDrop = function() 
  {
    assert dd_source && dd_placeholder_src;
    moveIt(dd_source, dd_placeholder_src, function()
    {
      if(dd_op == #copying)
        dd_source.swap(dd_placeholder_src);
      dd_placeholder_src.remove(); // delete it from the DOM
      dd_placeholder_src = null;
      dd_source.move();
      ddFinalize();
    });
  }

  setupDstPlaceholderAt = function(pos, horz) 
  {
    if(!dd_placeholder_dst) // if there was no dd_placeholder_dst before create it:
    {
      dd_placeholder_dst = new Element(dd_source.tag," ");
      dd_placeholder_dst.@#class = "placeholder dst";
      dd_target.insert(dd_placeholder_dst,pos);
      if(horz) dd_placeholder_dst.style#width = px(dd_source.box(#width,#inner,#self));
      else     dd_placeholder_dst.style#height = px(dd_source.box(#height,#inner,#self));
    }
    else
      dd_target.insert(dd_placeholder_dst,pos);
  }
  
  /*function animateDim(el, attr, startv, finalv, onend = null)
  {
    var units = startv.units; startv = startv.toFloat(); finalv = finalv.toFloat();
    var progress = 0.0;
    var easef = def.easeMove;
    function morph()
    {
      progress += 0.08;
      if( progress > 1.0 ) { el.style[attr] = length(finalv, units ); if(onend) onend(el); return; }
      var v = easef(progress, startv, finalv - startv, 1.0);
      el.style[attr] = length(v, units );
      return STEP_DELAY;
    }
    el.animate(morph);
  }*/
  
  setupSrcPlaceholderAt = function(pos, horz) 
  {
    /*if( def.easeMove )
    {
      var idx = dd_placeholder_src.index;
      var new_placeholder = dd_placeholder_src.clone();
      dd_target.insert(dd_placeholder_src,pos);
      dd_target.insert(new_placeholder,idx);
      var attr = horz? #width: #height;
      animateDim(new_placeholder, attr, px(dd_source.box(attr,#inner)), px(0), :el:el.remove() );
      animateDim(dd_placeholder_src, attr, px(0), px(dd_source.box(attr,#inner)));
      //animateDim(dd_placeholder_src,)
    }
    else*/
      dd_target.insert(dd_placeholder_src,pos); // just move dd_placeholder_src here
  }
          
  onMouseHandler = function(evt)
  { 
    // 'this' here is the draggable element.
    switch(evt.type)  
    {
      case Event.MOUSE_DOWN:  
      {
        if( captured ) return false;
        dd_x = evt.x; dd_y = evt.y;
        //stdout.$n({this.tag} {dd_x} {dd_y});
        var me = this; 
        this.post(:: me.capture(true));
        captured = true;
        return false;
      }
      case Event.MOUSE_UP:    captured = false; dd_active = false; this.capture(false); return false;
      case Event.MOUSE_MOVE: 
        if( !evt.mainButton ) { dd_active = false; return; } 
        if(dd_active)
          return doMove( evt.xView, evt.yView );
        else if( typeof dd_x == #integer )
        {
          var deltax = dd_x - evt.x;
          var deltay = dd_y - evt.y;
          //stdout.$n({dd_x} {dd_y});
          if( deltax < -X_THRESHOLD || deltax > X_THRESHOLD ||
              deltay < -Y_THRESHOLD || deltay > Y_THRESHOLD )
              doDD( this, evt.xView, evt.yView );
          return true;
        }
    }
  }
  // ready to go, attach onMouseHandler to the draggables
  self.select( :el: el.subscribe(onMouseHandler, Event.MOUSE), def.what);
}
